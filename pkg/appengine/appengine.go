// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package appengine contains buildpack library code for all runtimes.
package appengine

import (
	"encoding/json"
	"fmt"
	"os"
	"strconv"

	"github.com/GoogleCloudPlatform/buildpacks/pkg/env"
	gcp "github.com/GoogleCloudPlatform/buildpacks/pkg/gcpbuildpack"
)

const (
	// DefaultCommand is the command used in app_start.json if no entrypoint is specified.
	DefaultCommand = "/serve"
	// ConfigDir is the location relative to the user's application where the configFile lives.
	ConfigDir  = ".googleconfig"
	configFile = ConfigDir + "/app_start.json"
)

// Config holds the parameters to pass into app_start.json
type Config struct {
	Runtime        string     `json:"runtime,omitempty"`
	Entrypoint     Entrypoint `json:"entrypoint"`
	MainExecutable string     `json:"main,omitempty"`
}

// Entrypoint contains the command to start the application
type Entrypoint struct {
	Type    string `json:"type"`
	Command string `json:"command"`
	WorkDir string `json:"workdir"`
}

// EntrypointType represents how the entrypoint command was created.
type EntrypointType int

// This enum and its String() method need to be updated together.
// Generated represents a command generated by a language specific command generator.
// Default represents the default start command.
const (
	EntrypointDefault EntrypointType = iota
	EntrypointGenerated
	EntrypointUser
)

func (et EntrypointType) String() string {
	return [...]string{"Default", "Generated", "User"}[et]
}

type entrypointGenerator func(*gcp.Context) (*Entrypoint, error)

func getEntrypoint(ctx *gcp.Context, eg entrypointGenerator) (*Entrypoint, error) {
	if val := os.Getenv(env.Entrypoint); val != "" {
		return &Entrypoint{
			Type:    EntrypointUser.String(),
			Command: val,
		}, nil
	}
	if eg != nil {
		return eg(ctx)
	}
	return &Entrypoint{
		Type:    EntrypointDefault.String(),
		Command: DefaultCommand,
	}, nil
}

func getConfig(ctx *gcp.Context, runtime string, eg entrypointGenerator) (Config, error) {
	var c Config
	if val := os.Getenv(env.Runtime); val != "" {
		ctx.Debugf("Using %s: %s", env.Runtime, val)
		c.Runtime = val
	} else {
		ctx.Debugf("Using runtime: %s", runtime)
		c.Runtime = runtime
	}

	ep, err := getEntrypoint(ctx, eg)
	if err != nil {
		return Config{}, fmt.Errorf("getting entrypoint: %w", err)
	}
	c.Entrypoint = *ep

	if val := os.Getenv(env.GAEMain); val != "" {
		ctx.Debugf("Using %s: %s", env.GAEMain, val)
		c.MainExecutable = val
	}
	ctx.Debugf("Using config %#v", c)
	return c, nil
}

// Build serves as a common builder for App Engine buildpacks.
func Build(ctx *gcp.Context, runtime string, eg entrypointGenerator) error {
	var c Config
	var err error
	if c, err = getConfig(ctx, runtime, eg); err != nil {
		return fmt.Errorf("building config: %w", err)
	}

	l := ctx.Layer("config", gcp.LaunchLayer)

	cb, err := json.Marshal(c)
	if err != nil {
		return fmt.Errorf("marshalling JSON: %v", err)
	}

	ctx.RemoveAll(ConfigDir)
	ctx.Symlink(l.Path, ConfigDir)
	ctx.WriteFile(configFile, cb, 0444)

	ctx.AddWebProcess([]string{"/start"})
	return nil
}

// ApisEnabled returns true if the application has AppEngine API support enabled in app.yaml
func ApisEnabled(ctx *gcp.Context) (bool, error) {
	val, found := os.LookupEnv(env.AppEngineAPIs)
	if !found {
		return false, nil
	}
	parsed, err := strconv.ParseBool(val)
	if err != nil {
		return false, gcp.UserErrorf("parsing %q from %s: %v", val, env.AppEngineAPIs, err)
	}
	return parsed, nil
}
